# Use version 3.8 of the Docker Compose file format for modern features.
version: '3.8'

# Define all the services (containers) that make up your application.
services:

  # 1. PostgreSQL Database Service
  postgres:
    image: postgres:15
    container_name: postgres_db
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      # Mount a named volume for persistent data storage.
      - postgres_data:/var/lib/postgresql/data
      # Mount the init.sql script to be run on first startup.
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      # Expose the database port to your local machine for direct access if needed.
      - "5432:5432"
    # HEALTHCHECK: Prevents other containers from connecting until the database is ready.
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 5

  # 2. Redis Service (for Caching and Celery Broker)
  redis:
    image: redis:7-alpine
    container_name: redis_cache
    ports:
      # Expose the Redis port to your local machine.
      - "6379:6379"
    volumes:
      # Mount a named volume for persistent data storage.
      - redis_data:/data
    # HEALTHCHECK: Prevents other containers from connecting until Redis is ready.
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5

  # 3. RabbitMQ Service (Message Broker)
  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq_broker
    ports:
      # Expose the standard AMQP port for the application.
      - "5672:5672"
      # Expose the Management UI port (accessible at http://localhost:15672).
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASS}

  # 4. Flask API Service (Your Web Application)
  api:
    # Build the image from the Dockerfile in the current directory.
    build: .
    container_name: flask_api
    # Command to run a production-ready Gunicorn server.
    command: ["gunicorn", "-w", "4", "-b", "0.0.0.0:5000", "main:app"]
    ports:
      # Expose the API port to your local machine.
      - "5000:5000"
    env_file:
      # Load all environment variables from the .env file.
      - .env
    # DEPENDS_ON: Controls the startup order and waits for services to be healthy.
  # 5. Celery Worker Service (Background Task Processor)
  worker:
    build: .
    container_name: celery_worker
    # Command to start the Celery worker, pointing to the Celery app instance.
    # The "-P solo" flag is included for Windows compatibility.
    command: ["celery", "-A", "celery_worker.celery_app", "worker", "--loglevel=info", "-P", "solo"]
    env_file:
      - .env
    # DEPENDS_ON: The worker also needs to wait for the dependencies to be ready.
    entrypoint: ""

# Define named volumes to persist data even when containers are removed.
volumes:
  postgres_data:
  redis_data:
